<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
    <xs:element name="businessContext" type="businessContextType"/>

    <!-- Root -->
    <xs:complexType name="businessContextType">
        <xs:sequence>
            <xs:element type="includedContextsType" name="includedContexts" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Included contexts</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="preconditionsType" name="preconditions" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Preconditions</xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element type="postConditionsType" name="postConditions" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>Post conditions</xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:sequence>
        <xs:attribute type="xs:string" name="prefix" use="required"/>
        <xs:attribute type="xs:string" name="name" use="required"/>
    </xs:complexType>

    <!-- Included contexts -->
    <xs:complexType name="includedContextType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="xs:string" name="prefix" use="required"/>
                <xs:attribute type="xs:string" name="name" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="includedContextsType">
        <xs:sequence>
            <xs:element type="includedContextType" name="includedContext" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Conditions -->
    <xs:complexType name="preconditionsType">
        <xs:sequence>
            <xs:element type="preconditionType" name="precondition" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="preconditionType">
        <xs:sequence>
            <xs:element type="conditionType" name="condition" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
    </xs:complexType>

    <xs:complexType name="postConditionsType">
        <xs:sequence>
            <xs:element type="postConditionType" name="postCondition" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="postConditionType">
        <xs:sequence>
            <xs:element type="postConditionTypeType" name="type"/>
            <xs:element type="xs:string" name="referenceName"/>
            <xs:element type="conditionType" name="condition"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
    </xs:complexType>

    <xs:simpleType name="postConditionTypeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="FILTER_OBJECT_FIELD"/>
            <xs:enumeration value="FILTER_LIST_OF_OBJECTS"/>
            <xs:enumeration value="FILTER_LIST_OF_OBJECTS_FIELD"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="conditionType">
        <xs:sequence>
            <xs:element type="isNotNullType" name="isNotNull" minOccurs="0"/>
            <xs:element type="isNotBlankType" name="isNotBlank" minOccurs="0"/>
            <xs:element type="constantType" name="constant" minOccurs="0"/>
            <xs:element type="variableReferenceType" name="variableReference" minOccurs="0"/>
            <xs:element type="objectPropertyReferenceType" name="objectPropertyReference" minOccurs="0"/>
            <xs:element type="logicalAndType" name="logicalAnd" minOccurs="0"/>
            <xs:element type="logicalEqualsType" name="logicalEquals" minOccurs="0"/>
            <xs:element type="logicalOrType" name="logicalOr" minOccurs="0"/>
            <xs:element type="logicalNegateType" name="logicalNegate" minOccurs="0"/>
            <xs:element type="numericAddType" name="numericAdd" minOccurs="0"/>
            <xs:element type="numericDivideType" name="numericDivide" minOccurs="0"/>
            <xs:element type="numericGreaterOrEqualToType" name="numericGreaterOrEqualTo" minOccurs="0"/>
            <xs:element type="numericGreaterThanType" name="numericGreaterThan" minOccurs="0"/>
            <xs:element type="numericLessOrEqualToType" name="numericLessOrEqualTo" minOccurs="0"/>
            <xs:element type="numericLessThanType" name="numericLessThan" minOccurs="0"/>
            <xs:element type="numericMultiplyType" name="numericMultiply" minOccurs="0"/>
            <xs:element type="numericSubtractType" name="numericSubtract" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <!-- Expressions -->
    <xs:complexType name="constantType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute type="expressionType" name="type"/>
                <xs:attribute type="xs:string" name="value"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="isNotNullType">
        <xs:sequence>
            <xs:element type="conditionType" name="argument" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="isNotBlankType">
        <xs:sequence>
            <xs:element type="conditionType" name="argument" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="functionCallType">
        <xs:sequence>
            <xs:element type="conditionType" name="arguments" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="methodName" use="required"/>
        <xs:attribute type="expressionType" name="type" use="required"/>
    </xs:complexType>

    <xs:complexType name="variableReferenceType">
        <xs:attribute type="xs:string" name="name" use="required"/>
        <xs:attribute type="expressionType" name="type" use="required"/>
    </xs:complexType>

    <xs:complexType name="objectPropertyReferenceType">
        <xs:attribute type="xs:string" name="objectName" use="required"/>
        <xs:attribute type="xs:string" name="propertyName" use="required"/>
        <xs:attribute type="expressionType" name="type" use="required"/>
    </xs:complexType>

    <xs:complexType name="logicalAndType">
        <xs:sequence>
            <xs:element type="conditionType" name="left" minOccurs="1" maxOccurs="1"/>
            <xs:element type="conditionType" name="right" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="logicalEqualsType">
        <xs:sequence>
            <xs:element type="conditionType" name="left" minOccurs="1" maxOccurs="1"/>
            <xs:element type="conditionType" name="right" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="logicalNegateType">
        <xs:sequence>
            <xs:element type="conditionType" name="argument" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="logicalOrType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericAddType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericDivideType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericGreaterOrEqualToType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericGreaterThanType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericLessOrEqualToType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericLessThanType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericMultiplyType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="numericSubtractType">
        <xs:sequence>
            <xs:element type="conditionType" name="left"/>
            <xs:element type="conditionType" name="right"/>
        </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="expressionType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="number"/>
            <xs:enumeration value="string"/>
            <xs:enumeration value="bool"/>
            <xs:enumeration value="object"/>
            <xs:enumeration value="void"/>
        </xs:restriction>
    </xs:simpleType>

</xs:schema>
